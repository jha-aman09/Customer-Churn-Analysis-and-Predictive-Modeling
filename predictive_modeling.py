# -*- coding: utf-8 -*-
"""BCG X- Predictive modeling.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yjihKrNX8stvxkYxYqkVamvaDCu67KkD
"""

import warnings
warnings.filterwarnings("ignore", category=FutureWarning)

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
from datetime import datetime
import matplotlib.pyplot as plt

# Shows plots in jupyter notebook
# %matplotlib inline

# Set plot style
sns.set(color_codes=True)

df = pd.read_csv('/content/drive/MyDrive/data_for_predictions.csv')
df.drop(columns=["Unnamed: 0"], inplace=True)
df.head()

from sklearn import metrics
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier

# Make a copy of our data
train_df = df.copy()

# Separate target variable from independent variables
y = df['churn']
X = df.drop(columns=['id', 'churn'])
print(X.shape)
print(y.shape)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)
print(X_train.shape)
print(y_train.shape)
print(X_test.shape)
print(y_test.shape)

# Add model training in here!
model = RandomForestClassifier(n_estimators=100, max_depth=None, random_state=42) # Add parameters to the model!
model.fit(X_train,y_train) # Complete this method call!

y_pred = model.predict(X_test)

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
# Evaluate the model performance
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

# Generate a classification report
report = classification_report(y_test, y_pred)
print("\nClassification Report:\n")
print(report)

# Generate a confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)
print("\nConfusion Matrix:\n")
print(conf_matrix)

# Visualize the confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues", xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.title('Confusion Matrix')
plt.show()

"""### Why were the specific parameters chosen for the Random Forest model, and what is their expected impact on performance?

1. **`n_estimators=100`**:
   - Specifies the number of decision trees in the forest.
   - A higher number generally increases model stability and reduces variance but also increases computation time.
   - `100` is a balanced choice, ensuring robust predictions while keeping training time manageable.

2. **`max_depth=None`**:
   - Allows each tree to grow until all leaves are pure or contain fewer than the minimum samples required for splitting.
   - Ensures the model captures complex patterns in the data but risks overfitting, which can be mitigated with other parameters (e.g., pruning or `min_samples_split`).

3. **`random_state=42`**:
   - Ensures reproducibility of results by fixing the random seed.
   - Essential for consistent model performance during experiments.

### Do you think the model performance is satisfactory? Justify your answer.

- **Evaluation Metrics**:
  - **Accuracy**: Provides a good starting point, but itâ€™s not sufficient alone, especially in imbalanced datasets.
  - **Precision, Recall, and F1-score**: Highlight how well the model performs for each class, considering false positives and false negatives.
  - **Confusion Matrix**: Offers detailed insights into classification errors.

- **Satisfaction Justification**:
  - If accuracy and F1-scores are high across all classes, the model's performance is satisfactory.
  - If the confusion matrix shows a bias (e.g., misclassification in minority classes), this suggests the need for further optimization, such as hyperparameter tuning, class balancing, or different models.
  - A satisfactory performance depends on whether the evaluation metrics align with the project's objectives (e.g., minimizing churn misclassification).

Would you like to discuss potential improvements or alternative approaches to enhance the model's performance?
"""